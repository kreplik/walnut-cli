#!/bin/bash
# Setup script for Walnut EVM Debugger configuration

set -e

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[0;33m'
NC='\033[0m'

echo -e "${BLUE}Walnut EVM Debugger Setup${NC}"
echo "=========================="
echo

# Check if walnut.config.local already exists
if [ -f "$SCRIPT_DIR/walnut.config.local" ]; then
    echo -e "${YELLOW}Configuration file already exists: walnut.config.local${NC}"
    read -p "Do you want to update it? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Setup cancelled."
        exit 0
    fi
fi

# Function to find binary
find_binary() {
    local name=$1
    local common_paths=$2
    local found_path=""
    
    # Check if in PATH
    if command -v "$name" &> /dev/null; then
        found_path=$(which "$name")
        echo -e "${GREEN}Found $name in PATH: $found_path${NC}"
        return 0
    fi
    
    # Check common locations
    IFS=':' read -ra PATHS <<< "$common_paths"
    for path in "${PATHS[@]}"; do
        if [ -x "$path" ]; then
            found_path="$path"
            echo -e "${GREEN}Found $name at: $found_path${NC}"
            echo "$found_path"
            return 0
        fi
    done
    
    echo ""
    return 1
}

# Find solx
echo -e "${BLUE}Looking for solx...${NC}"
SOLX_PATHS="/Users/djtodorovic/projects/crypto/SOLIDITY/solx/target/debug/solx:/Users/djtodorovic/projects/crypto/SOLIDITY/solx/target/release/solx:$HOME/solx/target/debug/solx:$HOME/solx/target/release/solx"
SOLX_PATH=$(find_binary "solx" "$SOLX_PATHS")

if [ -z "$SOLX_PATH" ]; then
    echo -e "${YELLOW}solx not found automatically${NC}"
    read -p "Enter path to solx binary: " SOLX_PATH
    if [ ! -x "$SOLX_PATH" ]; then
        echo -e "${RED}Error: $SOLX_PATH is not executable${NC}"
        exit 1
    fi
fi

# Find evm-dwarf (formerly evm-debug)
echo -e "\n${BLUE}Looking for evm-dwarf...${NC}"
EVM_DEBUG_PATHS="/Users/djtodorovic/projects/crypto/SOLIDITY/evm-dwarf/target/debug/evm-dwarf:/Users/djtodorovic/projects/crypto/SOLIDITY/evm-dwarf/target/release/evm-dwarf:/Users/djtodorovic/projects/crypto/SOLIDITY/evm-debug/target/debug/evm-debug:/Users/djtodorovic/projects/crypto/SOLIDITY/evm-debug/target/release/evm-debug:$HOME/evm-dwarf/target/debug/evm-dwarf:$HOME/evm-dwarf/target/release/evm-dwarf"
EVM_DEBUG_PATH=$(find_binary "evm-dwarf" "$EVM_DEBUG_PATHS")

# Also check for old name
if [ -z "$EVM_DEBUG_PATH" ]; then
    EVM_DEBUG_PATH=$(find_binary "evm-debug" "$EVM_DEBUG_PATHS")
    if [ -n "$EVM_DEBUG_PATH" ]; then
        echo -e "${YELLOW}Found evm-debug (old name) - please rename to evm-dwarf${NC}"
    fi
fi

if [ -z "$EVM_DEBUG_PATH" ]; then
    echo -e "${YELLOW}evm-dwarf not found automatically${NC}"
    read -p "Enter path to evm-dwarf binary (or press Enter to skip): " EVM_DEBUG_PATH
    if [ -n "$EVM_DEBUG_PATH" ] && [ ! -x "$EVM_DEBUG_PATH" ]; then
        echo -e "${RED}Warning: $EVM_DEBUG_PATH is not executable${NC}"
        EVM_DEBUG_PATH=""
    fi
fi

# Get RPC URL
echo -e "\n${BLUE}Ethereum RPC Configuration${NC}"
read -p "Enter RPC URL [http://localhost:8545]: " RPC_URL
RPC_URL="${RPC_URL:-http://localhost:8545}"

# Test RPC connection
echo -n "Testing RPC connection... "
if curl -s -X POST -H "Content-Type: application/json" --data '{"jsonrpc":"2.0","method":"eth_blockNumber","params":[],"id":1}' "$RPC_URL" > /dev/null 2>&1; then
    echo -e "${GREEN}OK${NC}"
else
    echo -e "${YELLOW}Failed (connection will be tested when needed)${NC}"
fi

# Get private key
echo -e "\n${BLUE}Private Key Configuration${NC}"
echo "Default is Foundry's test account #0"
read -p "Enter private key [use default]: " PRIVATE_KEY
PRIVATE_KEY="${PRIVATE_KEY:-0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80}"

# Debug directory
read -p "Debug output directory [debug]: " DEBUG_DIR
DEBUG_DIR="${DEBUG_DIR:-debug}"

# Create configuration file
cat > "$SCRIPT_DIR/walnut.config.local" <<EOF
# Walnut EVM Debugger Configuration
# Generated by setup-walnut.sh on $(date)

# Path to solx binary
SOLX_PATH="$SOLX_PATH"

# Path to evm-dwarf binary (formerly evm-debug)
EVM_DEBUG_PATH="$EVM_DEBUG_PATH"

# Default RPC URL
RPC_URL="$RPC_URL"

# Default private key
PRIVATE_KEY="$PRIVATE_KEY"

# Debug output directory
DEBUG_DIR="$DEBUG_DIR"
EOF

echo -e "\n${GREEN}Configuration saved to: walnut.config.local${NC}"

# Test the setup
echo -e "\n${BLUE}Testing setup...${NC}"

# Test solx
echo -n "Testing solx... "
if "$SOLX_PATH" --version > /dev/null 2>&1; then
    echo -e "${GREEN}OK${NC}"
else
    echo -e "${RED}Failed${NC}"
fi

# Test evm-dwarf
if [ -n "$EVM_DEBUG_PATH" ]; then
    echo -n "Testing evm-dwarf... "
    if "$EVM_DEBUG_PATH" --help > /dev/null 2>&1; then
        echo -e "${GREEN}OK${NC}"
    else
        echo -e "${RED}Failed${NC}"
    fi
fi

# Install Python dependencies
echo -e "\n${BLUE}Python Dependencies${NC}"
echo "The transaction debugger requires Python packages: web3, eth-utils"
read -p "Install Python dependencies? (y/N) " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    pip install -r "$SCRIPT_DIR/requirements.txt"
fi

echo -e "\n${GREEN}Setup complete!${NC}"
echo
echo "You can now use the deployment script:"
echo -e "  ${BLUE}cd /path/to/your/project${NC}"
echo -e "  ${BLUE}$SCRIPT_DIR/scripts/deploy-contract.sh Counter src/Counter.sol${NC}"
echo
echo "Or override settings with command line options:"
echo -e "  ${BLUE}$SCRIPT_DIR/scripts/deploy-contract.sh --solx=/custom/path Counter src/Counter.sol${NC}"